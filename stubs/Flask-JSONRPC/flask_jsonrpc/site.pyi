from collections.abc import Callable
from typing import Any
from typing_extensions import TypeAlias, TypedDict
from uuid import UUID

Headers: TypeAlias = Any

ServiceProcedureDescribe = TypedDict(
    "ServiceProcedureDescribe", {"name": str, "summary": str | None, "params": list[dict[str, str]], "return": dict[str, str]}
)

class ServiceDescribe(TypedDict):
    id: str
    sdversion: str
    version: str
    name: str
    summary: str | None
    procs: list[ServiceProcedureDescribe]

JSONRPC_VERSION_DEFAULT: str
JSONRCP_DESCRIBE_METHOD_NAME: str
JSONRPC_DEFAULT_HTTP_HEADERS: dict[str, str]
JSONRPC_DEFAULT_HTTP_STATUS_CODE: int

class JSONRPCSite:
    view_funcs: dict[str, Callable[..., Any]]
    uuid: UUID
    name: str
    version: str
    def __init__(self) -> None: ...
    @property
    def is_json(self) -> bool: ...
    def register(self, name: str, view_func: Callable[..., Any]) -> None: ...
    def dispatch_request(self) -> tuple[Any, int, Headers | dict[str, str], tuple[str], list[tuple[str]]]: ...
    def validate_request(self) -> bool: ...
    def to_json(self, request_data: bytes) -> Any: ...
    def handle_dispatch_except(
        self, req_json: dict[str, Any]
    ) -> tuple[Any, int, Headers | dict[str, str], tuple[str], list[tuple[str]]]: ...
    def batch_dispatch(
        self, reqs_json: list[dict[str, Any]]
    ) -> tuple[list[Any], int, Headers | dict[str, str], tuple[str], list[tuple[str]]]: ...
    def dispatch(self, req_json: dict[str, Any]) -> tuple[Any, int, Headers | dict[str, str], tuple[str], list[tuple[str]]]: ...
    def validate(self, req_json: dict[str, Any]) -> bool: ...
    def unpack_tuple_returns(self, resp_view: Any) -> tuple[Any, int, Headers | dict[str, str], tuple[str], list[tuple[str]]]: ...
    def make_response(
        self, req_json: dict[str, Any], resp_view: Any
    ) -> tuple[Any, int, Headers | dict[str, str], tuple[str], list[tuple[str]]]: ...
    def is_notification_request(self, req_json: dict[str, Any]) -> bool: ...
    def is_batch_request(self, req_json: Any) -> bool: ...
    def python_type_name(self, pytype: Any) -> str: ...
    def procedure_desc(self, key: str) -> ServiceProcedureDescribe: ...
    def service_desc(self) -> ServiceDescribe: ...
    def describe(self) -> ServiceDescribe: ...
